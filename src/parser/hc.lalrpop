
use crate::parser::{ast::*, operators::*, expression::*};


#[LALR]
grammar;

Comment: String = {
    r"/\*(.|\n)*\*/" => <>.into(),
}

Type: Type = {
    "U0" => Type::Void,
    "I8" => Type::Signed(8),
    "U8" => Type::Unsigned(8),
    "I16" => Type::Signed(16),
    "U16" => Type::Unsigned(16),
    "I32" => Type::Signed(32),
    "U32" => Type::Unsigned(32),
    "I64" => Type::Signed(64),
    "U64" => Type::Unsigned(64),
    "F64" => Type::Float,
    // TODO: Fix ambiguity with a * b and T *b, if possible ðŸ¥º
    // <Type> "*" => <>.pointer(),
    Identifier => Type::Identifier(<>),
}

LiteralSignedInteger: i64 = {
    <sign:"-"> <num:LiteralInteger> => {
        let value = num as i64;
        if sign == "-" { -value }
        else { value }
    },
}

LiteralInteger: u64 = {
    <r"\d+"> => {
        u64::from_str_radix(<>, 10).unwrap() 
    },
    <r"0x[0-9a-fA-F]+"> => {
        u64::from_str_radix(<>.split("0x").nth(1).unwrap(), 16).unwrap() 
    },
    <r"0b[01]+"> => {
        u64::from_str_radix(<>.split("0b").nth(1).unwrap(), 2).unwrap() 
    }
}

Value: Value = {
    LiteralInteger => Value::Unsigned(<>),
    LiteralSignedInteger => Value::Integer(<>),
    LiteralChars => Value::Chars(<>),
};

ValueOrString: Value = {
    Value,
    LiteralString => Value::String(<>),
}

Identifier: Identifier = r"[_a-zA-Z][_a-zA-Z0-9]{0,30}" => <>.into();

LiteralString: String = r#""(?:[^"\\]|\\.)*""# => <>.trim_matches('"').into();
LiteralChars: Vec<u8> = r#"'(?:[^"\\]|\\.)*'"# => <>.trim_matches('\'').as_bytes().to_vec();



FormatStringStatement: FunctionCall = {
    // TODO;
    <lit:LiteralString> "," <a:FormatArgs> => {
        let mut args = vec![Argument::from(lit).into_expression()];
        a.into_iter().for_each(|arg| args.push(arg.into_expression()));
        FunctionCall::Print(args)
    }
}

Argument: Argument = {
    Value => Argument::Value(<>),
    Identifier => Argument::Identifier(<>),
    "(" <Expr> ")" => Argument::Expression(<>),
};

FormatArgs = Sep<Argument, ",">;

Sep<T, S>: Vec<T> = {
    <mut this:(<T> S)*> <next:T?> => {
        if let Some(n) = next {
            this.push(n);
        }
        this
    }
}


SepAtLeastOne<T, S>: Vec<T> = {
    <mut this:(<T> S)*> <next:T> => {
        this.push(next);
        this
    }
}

OptionalSep<T, S>: Vec<Option<T>> = {
    <mut this:(<T?> S)*> <next:T?> => {
        this.push(next);
        this
    }
}

FunctionCallArgument: Box<Expression> = {
    Expr => <>,
    LiteralString => Expression::string_literal(<>).boxed(),
}

FunctionCall: FunctionCall = {
    <identifier:Identifier> "(" <args:OptionalSep<FunctionCallArgument, ",">> ")" => FunctionCall { identifier, args} ,
}

Precedence<Op,NextPrecedence>: Box<Expression> = {
    Precedence<Op,NextPrecedence> Op NextPrecedence => Expression::operation(<>).boxed(),
    NextPrecedence
};

P12Op: Operator = {
    "=" => Operator::Assign,
    "<<=" => Operator::AShl,
    ">>=" => Operator::AShr,
    "*=" => Operator::AMul,
    "/=" => Operator::ADiv,
    "&=" => Operator::ABAnd,
    "|=" => Operator::ABOr,
    "^=" => Operator::ABXor,
    "+=" => Operator::AAdd,
    "-=" => Operator::ASub,
}
P11Op: Operator = {
    "||" => Operator::Or,
}
P10Op: Operator = {
    "^^" => Operator::Xor,
}
P9Op: Operator = {
    "&&" => Operator::And,
}
P8Op: Operator = {
    "==" => Operator::Eq,
    "!=" => Operator::Ne,
}
P7Op: Operator = {
    "<" => Operator::Lt,
    ">" => Operator::Gt,
    "<=" => Operator::Le,
    ">=" => Operator::Ge,
}
P6Op: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Sub,
}
P5Op: Operator = {
    "|" => Operator::BOr,
}
P4Op: Operator = {
    "^" => Operator::BXor,
}
P3Op: Operator = {
    "&" => Operator::BAnd,
}
P2Op: Operator = {
    "*" => Operator::Mul,
    "/" => Operator::Div,
    "%" => Operator::Mod,
}
P2PreOp: Operator = {
    "!" => Operator::Not,
    "*" => Operator::Deref,
    "&" => Operator::Ref,
}
P1Op: Operator = {
    "`" => Operator::Power,
    ">>" => Operator::Shr,
    "<<" => Operator::Shl,
}
P1PostUnaryOp: Operator = {
    "++" => Operator::AAdd,
    "--" => Operator::ASub,
}

P12Expr = Precedence<P12Op, P11Expr>;
P11Expr = Precedence<P11Op, P10Expr>;
P10Expr = Precedence<P10Op, P9Expr>;
P9Expr = Precedence<P9Op, P8Expr>;
P8Expr = Precedence<P8Op, P7Expr>;
P7Expr = Precedence<P7Op, P6Expr>;
P6Expr = Precedence<P6Op, P5Expr>;
P5Expr = Precedence<P5Op, P4Expr>;
P4Expr = Precedence<P4Op, P3Expr>;
P3Expr = Precedence<P3Op, P2Expr>;
P2Expr: Box<Expression> = {
    P2PreOp P2Expr => 
        Expression::UnaryOperation(<>).boxed(),

    Precedence<P2Op, P1Expr>,
};
P1Expr: Box<Expression> = {
    P1Expr P1PostUnaryOp =>
        Expression::operation(
            <>,
            Expression::one(),
        ).boxed(),

        
    <P1Expr> "[" <Expr> "]" => Expression::Index(<>).boxed(),
    <P1Expr> "->" <Identifier> => Expression::MemberAccess(<>).boxed(),

    P1Expr P1Op P0Expr => Expression::operation(<>).boxed(),

    P0Expr
}

P0Expr: Box<Expression> = {
    Value => Expression::Value(<>).boxed(),
    Identifier => Expression::Identifier(<>).boxed(),
    FunctionCall => Expression::FunctionCall(<>).boxed(),
    "(" <Expr> ")",
}

Expr = P12Expr;


Statements: Vec<Box<Statement>> = {
    <mut this:Statements> <next:Statement> => {
        this.push(Box::new(next));
        this
    },
    <mut this:Statements> <next:ConditionStatement> => {
        this.push(Box::new(next));
        this
    },
    ConditionStatement => vec![Box::new(<>)],
    Statement => vec![Box::new(<>)],
}

ForStatement: Statement = {
    "for" "(" <assignment:Expr?> ";" <condition:Expr?> ";" <each:Expr?> ")" <body:Statement> => Statement::Loop { assignment, condition, each, body: Box::new(body) },
}

ReturnStatement: Statement = {
    "return" <Expr> ";" => Statement::Return(<>)
}

ConditionStatement: Statement = {
    "if" "(" <condition:Expr> ")" <body:Statement> <else_statement:ElseStatement?> => {
        Statement::Condition(
            Box::new(Condition { condition, body, else_statement }),
        )
    },
}

ElseStatement: ElseCondition = {
    "else" <condition:("if" "(" <Expr> ")")?> <body:Statement> <else_statement:ElseStatement?> => {
        ElseCondition {
            condition, body, else_statement: else_statement.map(Box::new),
        }
    }
}

StringStatement: Statement = {
    <LiteralString> ";"=> 
        Statement::Expression(
            Expression::FunctionCall(
                FunctionCall::Print(vec![
                    Expression::string_literal(<>).boxed()
                ])
            ).boxed()
        ),
    
    <FormatStringStatement> ";" => Statement::Expression(Expression::FunctionCall(<>).boxed()),
}

// CharsStatement: Statement = {
//     <LiteralChars> ";" => 
//         Statement::Expression(
//             Expression::FunctionCall(
//                 FunctionCall::PutChars(vec![
//                     Expression::
//                 ])
//             )
//         )
// }

Statement: Statement = {
    <Expr> ";" => Statement::Expression(<>),
    Declaration => Statement::Declaration(<>),
    "{" <Statements> "}" => Statement::Compound(<>),
    ForStatement,
    ReturnStatement,
    StringStatement,
    FunctionDeclaration => Statement::FunctionDeclaration(<>),
    Comment => Statement::Comment(<>),
    Directive => Statement::Directive(<>),
    Definition => Statement::Definition(<>),
}

Directive: Directive = {
    "#define" <arg1:Identifier> <arg2:ValueOrString> => Directive::Define(<>),
}


Definition: Definition = {
    "class" <Identifier> "{" <DefinitionBody> "}" ";"=> Definition::new(<>),
}

DefinitionBody: Vec<Declaration> = Sep<Declaration, ";">;

Declaration: Declaration = {
    #[precedence(level="0")]
    <ty:Type> <identifiers:SepAtLeastOne<("*"? Identifier), ",">> => 
    Declaration::new(ty, identifiers.into_iter().map(|(star, ident)| if star.is_some() { ident.pointer() } else { ident }).collect::<Vec<Identifier>>())
}

FunctionDeclaration: FunctionDeclaration = {
    <return_type:Type> <identifier:Identifier> "(" <args:FunctionDeclarationArguments> ")" "{" <body:Statements> "}" =>     
        FunctionDeclaration { return_type, identifier, args, body, }
}

FunctionDeclarationArgument: FunctionArgument = {
    <ty:Type> <identifier:Identifier> "="? <default_value:Value?> => FunctionArgument { ty, identifier, default_value }
}

FunctionDeclarationArguments: FunctionArguments = {
    Sep<FunctionDeclarationArgument, ","> => FunctionArguments::Args(<>),
    "..." => FunctionArguments::Varargs,
};


pub File = Statements;